/* Copyright (C) 2003  USMA
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/* The following code was generated by JFlex 1.3.5 on 8/23/03 8:09 PM */
/* HTMLLexer.java is a generated file.  You probably want to
 * edit HTMLLexer.lex to make changes.  Use JFlex to generate it.
 * To generate HTMLLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main HTMLLexer.lex</code><br>
 * You will then have a file called HTMLLexer.java
 */
/*
 * This file is part of a <a href="http://ostermiller.org/syntax/">syntax
 * highlighting</a> package.
 * Copyright (C) 1999-2002 Stephen Ostermiller
 * http://ostermiller.org/contact.pl?regarding=Syntax+Highlighting
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * See COPYING.TXT for details.
 */
/* This is an extended version of the original HTMLLexer1, to support XHTML syntax
 * Created by D/EECS, USMA 2003
 */
package eecs.syntax.Lexer;

import java.io.*;


/**
 * HTMLLexer is an XHTML lexer.  Created with JFlex.  An example of how it is used:
 *  <CODE>
 *  <PRE>
 *  HTMLLexer shredder = new HTMLLexer(System.in);
 *  HTMLToken t;
 *  while ((t = shredder.getNextToken()) != null){
 *      System.out.println(t);
 *  }
 *  </PRE>
 *  </CODE>
 *
 * <P>
 * Changed From: TagUnmatched=([^a-zA-Z0-9\ \r\n\-\.\/\>])
 *
 * @see HTMLToken
 */
/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 8/23/03 8:09 PM from the specification file
 * <tt>file:/K:/Eclipse/eclipse/workspace/EECSEditor/src/eecs/syntax/Lexer/HTMLLexer.lex</tt>
 */
public class HTMLLexer implements Lexer {
  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int START_SCRIPT_VALUE = 9;
  final public static int PRE_TAG = 11;
  final public static int TAG = 4;
  final public static int COMMENT_DEF = 21;
  final public static int TEXTAREA = 18;
  final public static int START_PRE_EQUAL = 12;
  final public static int START_END_TAG = 2;
  final public static int START_PRE_VALUE = 13;
  final public static int TEXTAREA_TAG = 15;
  final public static int SCRIPT = 10;
  final public static int START_TEXTAREA_EQUAL = 16;
  final public static int START_TEXTAREA_VALUE = 17;
  final public static int TAG_END = 19;
  final public static int START_EQUAL = 5;
  final public static int FINISH_END_TAG = 22;
  final public static int START_TAG = 1;
  final public static int SCRIPT_TAG = 7;
  final public static int START_VALUE = 6;
  final public static int PRE = 14;
  final public static int START_DOC_TAG = 3;
  final public static int YYINITIAL = 0;
  final public static int START_SCRIPT_EQUAL = 8;
  final public static int DOCTYPE = 20;

  /**
   * Translates characters to character classes
   */
  final private static char[] yycmap = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 0, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 4, 66, 61, 7, 0, 69, 58, 62, 0, 0, 0, 0, 0, 70, 64, 65, 1,
    33, 31, 32, 34, 1, 1, 1, 1, 1, 63, 59, 60, 71, 67, 68, 0, 35, 47, 37, 49, 36,
    3, 48, 40, 38, 2, 51, 52, 53, 41, 42, 54, 2, 45, 55, 39, 43, 2, 2, 8, 44, 50,
    0, 0, 0, 0, 0, 0, 25, 10, 16, 21, 14, 27, 30, 29, 13, 57, 51, 17, 26, 9, 19,
    12, 28, 22, 11, 18, 20, 24, 56, 15, 23, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  };

  /**
   * Translates a state to a row index in the transition table
   */
  final private static int[] yy_rowMap = {
    0, 72, 144, 216, 288, 360, 432, 504, 576, 648, 720, 792, 864, 936, 1008,
    1080, 1152, 1224, 1296, 1368, 1440, 1512, 1584, 1656, 1728, 1800, 1872, 1944,
    2016, 2088, 2160, 2232, 2304, 2376, 1944, 2448, 2520, 2592, 2304, 2664, 2736,
    2808, 2880, 2304, 2304, 2952, 3024, 3096, 3168, 3240, 2304, 3312, 2304, 3384,
    3456, 3096, 3528, 3600, 3672, 3744, 3816, 2304, 2304, 3888, 3960, 3672, 4032,
    4104, 4176, 4248, 4320, 2304, 2304, 4392, 4464, 4536, 4392, 4608, 4680, 4752,
    4824, 4896, 4968, 5040, 2304, 2808, 1728, 5112, 5184, 5256, 5328, 5400, 5472,
    5544, 5616, 5688, 5760, 5832, 5904, 5976, 6048, 6120, 6192, 6264, 6336, 6408,
    6480, 6552, 6624, 6696, 6768, 6840, 6912, 6984, 7056, 7128, 7200, 7272, 7344,
    7416, 7488, 7560, 7632, 7704, 7776, 7848, 7920, 7992, 8064, 8136, 8208, 8280,
    8352, 2304, 2304, 8424, 8496, 8568, 8640, 8712, 2448, 8784, 8856, 8928, 9000,
    9072, 9144, 5112, 9216, 2304, 2304, 9288, 2304, 2304, 9360, 9432, 9504, 2304,
    9576, 2304, 9648, 9720, 2304, 9792, 2304, 2304, 9864, 9936, 4896, 4968,
    10008, 10080, 10152, 10224, 10296, 10368, 10440, 10512, 10584, 10656, 10728,
    10800, 10872, 10944, 11016, 11088, 11160, 11232, 11304, 11376, 11448, 11520,
    11592, 11664, 11736, 11808, 11880, 11952, 12024, 12096, 12168, 12240, 12312,
    12384, 12456, 12528, 12600, 12672, 12744, 12816, 12888, 12960, 13032, 13104,
    13176, 13248, 13320, 13392, 13464, 13536, 13608, 13680, 13752, 13824, 13896,
    13968, 14040, 14112, 14184, 14256, 14328, 14400, 14472, 14544, 14616, 14688,
    14760, 14832, 14904, 14976, 15048, 15120, 15192, 15264, 15336, 15408, 15480,
    15552, 15624, 15696, 15768, 15840, 15912, 15984, 16056, 16128, 16200, 16272,
    16344, 16416, 16488, 16560, 16632, 16704, 16776, 16848, 16920, 16992, 17064,
    17136, 17208, 17280, 2016, 17352, 17424, 17496, 17568, 17640, 17712, 17784,
    17856, 17928, 18000, 18072, 18144, 18216, 18288, 18360, 18432, 18504, 2304,
    18576, 18648, 18720, 18792, 18864, 18936, 19008, 19080, 19152, 19224, 19296,
    19368, 19440, 19512, 19584, 19656, 19728, 19800, 19872, 19944, 20016, 20088,
    20160, 20232, 20304, 20376, 20448, 20520, 20592, 20664, 20736, 20808, 20880,
    20952, 21024, 21096, 21168, 21240, 21312, 21384, 21456, 21528, 21600, 21672,
    21744, 21816, 21888, 21960, 22032, 22104, 22176, 22248, 22320, 22392, 22464,
    22536, 22608, 22680, 22752, 22824, 22896, 22968, 23040, 23112, 23184, 23256,
    23328, 23400, 23472, 23544, 23616, 2304, 23688, 23760, 23832, 23904, 2304,
    2736, 3168, 23976, 24048, 24120, 3744, 24192, 24264, 4248, 24336, 24408,
    24480, 24552, 24624, 24696, 24768, 24840, 24912, 24984, 25056, 25128, 25200,
    25272, 25344, 25416, 25488, 25560, 25632, 25704, 25776, 25848, 25920, 25992,
    26064, 26136, 26208, 26280, 26352, 26424, 26496, 26568, 26640, 26712, 26784,
    26856, 26928, 27000, 27072, 27144, 27216, 27288, 27360, 27432, 27504, 2016,
    27576, 27648, 27720, 27792, 27864, 27936, 28008, 2304, 28080, 28152, 28224,
    28296, 28368, 28440, 28512, 2304, 28584, 28656, 28728, 28800, 28872, 28944,
    29016, 2016, 29088, 29160, 29232, 29304, 29376, 29448, 29520, 29592, 29664,
    29736, 29808, 29880, 29952, 30024, 30096, 30168, 30240, 30312, 30384, 30456,
    30528, 30600, 30672, 30744, 30816, 2304, 30888
  };

  /**
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 =
    "\4\30\3\31\63\30\1\32\1\30\1\33\13\30\2\34" +
    "\2\35\4\34\3\35\1\36\1\37\5\35\1\40\14\35" +
    "\4\34\24\35\1\36\2\35\11\34\1\41\6\34\2\42" +
    "\1\31\1\34\1\31\1\34\27\42\4\34\27\42\11\34" +
    "\1\41\4\34\4\43\1\44\1\43\1\44\16\43\1\45" +
    "\33\43\1\46\21\43\1\47\2\43\1\50\1\43\1\34" +
    "\3\51\1\52\1\34\1\31\1\34\7\51\1\53\52\51" +
    "\6\34\1\51\2\34\1\54\2\34\1\51\2\34\3\51" +
    "\1\31\1\34\1\31\1\34\7\51\1\53\52\51\6\34" +
    "\1\51\2\34\1\41\2\34\1\51\1\55\4\34\1\31" +
    "\70\34\1\56\1\57\11\34\1\60\3\61\1\31\1\60" +
    "\1\31\1\60\7\61\1\62\52\61\6\60\1\61\2\60" +
    "\1\63\2\60\1\61\1\60\1\64\3\61\1\31\1\64" +
    "\1\31\1\64\7\61\1\62\52\61\6\64\1\61\2\64" +
    "\1\41\2\64\1\61\1\65\4\60\1\31\70\60\1\66" +
    "\1\67\4\60\1\70\4\60\74\71\1\72\13\71\1\73" +
    "\3\74\1\31\1\73\1\31\1\73\7\74\1\75\52\74" +
    "\6\73\1\74\2\73\1\76\2\73\1\74\2\73\3\74" +
    "\1\31\1\73\1\31\1\73\7\74\1\75\52\74\6\73" +
    "\1\74\2\73\1\41\2\73\1\74\1\77\4\73\1\31" +
    "\70\73\1\100\1\101\4\73\1\102\4\73\74\103\1\104" +
    "\13\103\1\105\3\106\1\31\1\105\1\31\1\105\7\106" +
    "\1\107\52\106\6\105\1\106\2\105\1\110\2\105\1\106" +
    "\2\105\3\106\1\31\1\105\1\31\1\105\7\106\1\107" +
    "\52\106\6\105\1\106\2\105\1\41\2\105\1\106\1\111" +
    "\4\112\1\31\70\112\1\113\1\114\4\112\1\115\4\112" +
    "\74\116\1\117\13\116\110\47\4\120\1\121\70\120\1\122" +
    "\1\123\2\120\1\124\1\120\1\54\4\120\4\125\1\126" +
    "\2\127\72\125\1\130\1\125\1\54\2\125\1\131\1\125" +
    "\4\34\1\52\1\34\1\31\72\34\1\132\1\34\1\54" +
    "\4\34\4\30\3\0\63\30\1\0\1\30\1\0\13\30" +
    "\4\0\3\31\101\0\4\133\1\0\1\133\1\0\1\134" +
    "\1\135\1\136\1\137\1\140\1\141\1\142\1\143\1\135" +
    "\1\144\1\145\1\146\1\147\1\150\1\151\1\152\1\153" +
    "\1\133\1\154\1\155\1\156\1\157\1\160\1\161\4\133" +
    "\1\162\1\163\1\164\1\165\1\166\1\133\1\167\1\170" +
    "\1\171\1\172\1\173\1\174\1\175\1\176\1\177\1\175" +
    "\1\200\1\201\1\202\1\203\1\204\1\205\1\133\3\0" +
    "\13\133\101\0\1\206\1\207\1\0\1\210\1\211\2\0" +
    "\103\34\1\41\4\34\1\0\3\35\4\0\62\35\6\0" +
    "\1\35\5\0\1\35\2\0\3\35\4\0\10\35\1\212" +
    "\24\35\1\212\24\35\6\0\1\35\5\0\1\35\2\0" +
    "\3\35\4\0\16\35\1\213\43\35\6\0\1\35\5\0" +
    "\1\35\2\0\3\35\4\0\6\35\1\214\53\35\6\0" +
    "\1\35\5\0\1\35\112\0\3\42\4\0\62\42\6\0" +
    "\1\42\5\0\1\42\1\0\4\34\1\215\1\34\1\215" +
    "\16\34\1\216\33\34\1\217\21\34\1\0\2\34\1\220" +
    "\24\34\1\221\26\34\1\221\30\34\1\0\27\34\1\222" +
    "\26\34\1\222\30\34\1\0\107\34\1\0\2\34\1\223" +
    "\1\34\1\0\3\51\4\0\62\51\6\0\1\51\5\0" +
    "\1\51\5\0\1\52\2\31\72\0\1\224\7\0\3\51" +
    "\4\0\22\51\1\225\37\51\6\0\1\51\5\0\1\51" +
    "\1\0\75\56\1\226\12\56\76\57\1\226\11\57\103\60" +
    "\1\227\4\60\1\0\3\61\4\0\62\61\6\0\1\61" +
    "\5\0\1\61\2\0\3\61\4\0\22\61\1\230\37\61" +
    "\6\0\1\61\5\0\1\61\1\0\103\64\1\231\4\64" +
    "\75\66\1\232\12\66\76\67\1\232\11\67\74\71\1\233" +
    "\107\71\1\233\4\71\1\234\1\235\5\71\103\73\1\236" +
    "\4\73\1\0\3\74\4\0\62\74\6\0\1\74\5\0" +
    "\1\74\2\0\3\74\4\0\22\74\1\237\37\74\6\0" +
    "\1\74\5\0\1\74\1\0\75\100\1\240\12\100\76\101" +
    "\1\240\11\101\74\103\1\241\107\103\1\241\4\103\1\242" +
    "\6\103\103\105\1\243\4\105\1\0\3\106\4\0\62\106" +
    "\6\0\1\106\5\0\1\106\2\0\3\106\4\0\22\106" +
    "\1\244\37\106\6\0\1\106\5\0\1\106\1\0\103\112" +
    "\1\245\4\112\75\113\1\246\12\113\76\114\1\246\11\114" +
    "\74\116\1\247\107\116\1\247\4\116\1\250\6\116\75\120" +
    "\1\251\1\252\4\120\1\0\10\120\1\121\70\120\1\251" +
    "\1\252\2\120\1\124\1\120\1\0\4\120\75\251\1\120" +
    "\12\251\76\252\1\120\11\252\75\120\1\251\1\252\4\120" +
    "\1\54\4\120\103\0\1\54\112\0\1\223\1\0\103\34" +
    "\1\54\4\34\4\133\1\0\1\133\1\0\63\133\3\0" +
    "\14\133\1\253\2\133\1\0\1\133\1\0\1\133\1\254" +
    "\6\133\1\254\17\133\4\253\27\133\3\0\17\133\1\0" +
    "\1\133\1\0\6\133\1\255\54\133\3\0\17\133\1\0" +
    "\1\133\1\0\3\133\1\256\1\257\1\133\2\255\3\133" +
    "\1\260\1\261\1\255\1\262\3\133\1\263\40\133\3\0" +
    "\17\133\1\0\1\133\1\0\7\133\1\264\5\133\1\265" +
    "\1\266\1\267\43\133\3\0\17\133\1\0\1\133\1\0" +
    "\3\133\1\266\1\133\1\270\1\271\1\272\1\133\1\273" +
    "\3\133\1\274\1\275\7\133\1\276\20\133\1\277\13\133" +
    "\3\0\17\133\1\0\1\133\1\0\4\133\1\135\1\133" +
    "\1\300\1\301\2\133\1\302\1\133\1\303\2\133\1\304" +
    "\2\133\1\305\3\133\1\135\34\133\3\0\17\133\1\0" +
    "\1\133\1\0\2\133\1\306\1\133\1\307\2\133\1\310" +
    "\1\133\1\311\2\133\1\264\1\312\4\133\1\313\1\314" +
    "\1\133\1\315\1\133\1\316\33\133\3\0\17\133\1\0" +
    "\1\133\1\0\2\133\1\256\2\133\1\317\2\133\1\320" +
    "\1\311\1\133\1\321\1\133\1\322\4\133\1\313\1\323" +
    "\1\133\1\324\1\133\1\316\33\133\3\0\17\133\1\0" +
    "\1\133\1\0\6\133\1\325\1\326\1\133\1\327\1\330" +
    "\1\133\1\331\1\332\1\133\1\333\2\133\1\334\3\133" +
    "\1\135\34\133\3\0\17\133\1\0\1\133\1\0\4\133" +
    "\1\335\2\133\1\255\1\133\1\336\1\133\1\255\1\337" +
    "\1\133\1\266\1\340\2\133\1\341\1\133\1\342\7\133" +
    "\1\343\26\133\3\0\17\133\1\0\1\133\1\0\6\133" +
    "\1\344\10\133\1\345\2\133\1\202\3\133\1\346\34\133" +
    "\3\0\17\133\1\0\1\133\1\0\4\133\1\347\1\350" +
    "\1\133\1\277\1\133\1\311\1\351\1\352\1\133\1\312" +
    "\1\133\1\353\2\133\1\313\1\354\3\133\1\316\33\133" +
    "\3\0\17\133\1\0\1\133\1\0\5\133\1\355\3\133" +
    "\1\311\3\133\1\312\4\133\1\356\1\357\3\133\1\316" +
    "\4\133\1\343\26\133\3\0\17\133\1\0\1\133\1\0" +
    "\6\133\1\360\1\361\12\133\1\362\11\133\1\343\26\133" +
    "\3\0\17\133\1\0\1\133\1\0\4\133\1\335\2\133" +
    "\1\363\1\133\1\336\1\340\3\133\1\266\3\133\1\364" +
    "\1\133\1\342\1\133\1\365\5\133\1\343\26\133\3\0" +
    "\17\133\1\0\1\133\1\0\7\133\1\366\5\133\1\312" +
    "\4\133\1\313\40\133\3\0\17\133\1\0\1\133\1\0" +
    "\2\133\1\367\1\133\1\370\2\133\1\277\1\133\1\371" +
    "\1\372\1\260\1\133\1\312\1\133\1\373\2\133\1\313" +
    "\1\334\3\133\1\316\33\133\3\0\17\133\1\0\1\133" +
    "\1\0\6\133\1\374\6\133\1\255\1\262\3\133\1\375" +
    "\40\133\3\0\17\133\1\0\1\133\1\0\2\133\1\376" +
    "\11\133\1\377\2\133\1\u0100\43\133\3\0\17\133\1\0" +
    "\1\133\1\0\15\133\1\275\45\133\3\0\17\133\1\0" +
    "\1\133\1\0\7\133\1\u0101\12\133\1\343\11\133\1\343" +
    "\26\133\3\0\17\133\1\0\1\133\1\0\7\133\1\255" +
    "\3\133\1\255\6\133\1\u0102\40\133\3\0\17\133\1\0" +
    "\1\133\1\0\11\133\1\311\1\372\1\260\1\133\1\312" +
    "\1\133\1\373\2\133\1\313\4\133\1\316\5\133\1\277" +
    "\25\133\3\0\17\133\1\0\1\133\1\0\5\133\1\317" +
    "\3\133\1\311\1\133\1\u0103\1\133\1\312\4\133\1\313" +
    "\4\133\1\316\10\133\1\u0104\22\133\3\0\17\133\1\0" +
    "\1\133\1\0\11\133\1\327\14\133\1\135\34\133\3\0" +
    "\17\133\1\0\1\133\1\0\11\133\1\311\2\133\1\264" +
    "\1\312\4\133\1\313\4\133\1\316\33\133\3\0\17\133" +
    "\1\0\1\133\1\0\22\133\1\202\3\133\1\175\12\133" +
    "\1\u0105\21\133\3\0\17\133\1\0\1\133\1\0\13\133" +
    "\1\260\1\133\1\255\45\133\3\0\17\133\1\0\1\133" +
    "\1\0\4\133\1\347\4\133\1\311\1\133\1\260\1\133" +
    "\1\312\4\133\1\313\1\354\3\133\1\316\5\133\1\277" +
    "\25\133\3\0\17\133\1\0\1\133\1\0\5\133\1\317" +
    "\3\133\1\311\3\133\1\312\4\133\1\313\4\133\1\316" +
    "\33\133\3\0\17\133\1\0\1\133\1\0\15\133\1\312" +
    "\4\133\1\313\40\133\3\0\17\133\1\0\1\133\1\0" +
    "\26\133\1\365\34\133\3\0\17\133\1\0\1\133\1\0" +
    "\7\133\1\264\51\133\1\u0106\1\133\3\0\17\133\1\0" +
    "\1\133\1\0\7\133\1\264\53\133\3\0\17\133\1\0" +
    "\1\133\1\0\22\133\1\u0102\40\133\3\0\17\133\1\0" +
    "\1\133\1\0\7\133\1\u0107\12\133\1\u0108\40\133\3\0" +
    "\17\133\1\0\1\133\1\0\22\133\1\u0109\40\133\3\0" +
    "\17\133\1\0\1\133\1\0\22\133\1\u010a\40\133\3\0" +
    "\17\133\1\0\1\133\1\0\15\133\1\255\45\133\3\0" +
    "\17\133\1\0\1\133\1\0\4\133\1\135\1\133\1\255" +
    "\10\133\1\u010b\6\133\1\135\34\133\3\0\17\133\1\0" +
    "\1\133\1\0\6\133\1\u010c\2\133\1\273\51\133\3\0" +
    "\17\133\1\0\1\133\1\0\7\133\1\u010d\53\133\3\0" +
    "\13\133\104\210\1\u010e\3\210\105\211\1\u010f\2\211\1\0" +
    "\3\35\4\0\16\35\1\u0110\26\35\1\u0110\14\35\6\0" +
    "\1\35\5\0\1\35\2\0\3\35\4\0\6\35\1\u0111" +
    "\53\35\6\0\1\35\5\0\1\35\2\0\3\35\4\0" +
    "\7\35\1\u0112\52\35\6\0\1\35\5\0\1\35\1\0" +
    "\23\34\1\u0113\26\34\1\u0113\30\34\1\0\27\34\1\u0114" +
    "\26\34\1\u0114\30\34\1\0\107\34\1\0\2\34\1\0" +
    "\21\34\1\u0115\24\34\1\u0115\35\34\1\0\4\34\20\0" +
    "\1\u0115\24\0\1\u0115\42\0\106\223\1\u0116\1\223\1\0" +
    "\3\51\4\0\11\51\1\u0117\50\51\6\0\1\51\5\0" +
    "\1\51\2\0\3\61\4\0\11\61\1\u0118\50\61\6\0" +
    "\1\61\5\0\1\61\1\0\74\71\1\233\4\71\1\u0119" +
    "\21\71\1\u011a\53\71\1\u011a\4\71\1\233\17\71\3\235" +
    "\65\71\1\233\11\71\1\u011b\1\71\1\0\3\74\4\0" +
    "\11\74\1\u011c\50\74\6\0\1\74\5\0\1\74\1\0" +
    "\74\103\1\241\4\103\1\u011d\22\103\1\u011e\51\103\1\u011e" +
    "\5\103\1\241\13\103\1\0\3\106\4\0\11\106\1\u011f" +
    "\50\106\6\0\1\106\5\0\1\106\1\0\74\116\1\247" +
    "\4\116\1\u0120\30\116\1\u0121\24\116\1\u0122\24\116\1\247" +
    "\13\116\1\133\1\253\2\133\1\0\1\133\1\0\30\133" +
    "\4\253\27\133\1\0\1\u0123\1\0\14\133\1\u0124\1\133" +
    "\1\u0124\1\0\1\133\1\0\3\133\1\u0124\3\133\1\u0124" +
    "\1\133\1\u0124\4\133\1\u0124\3\133\1\u0124\1\133\1\u0124" +
    "\3\133\7\u0124\11\133\1\u0124\1\133\1\u0124\10\133\3\0" +
    "\17\133\1\0\1\133\1\0\63\133\1\0\1\u0123\1\0" +
    "\17\133\1\0\1\133\1\0\4\133\1\334\56\133\3\0" +
    "\17\133\1\0\1\133\1\0\15\133\1\u0125\45\133\3\0" +
    "\17\133\1\0\1\133\1\0\6\133\1\u0126\54\133\3\0" +
    "\17\133\1\0\1\133\1\0\13\133\1\u0127\47\133\3\0" +
    "\17\133\1\0\1\133\1\0\22\133\1\u0128\40\133\3\0" +
    "\17\133\1\0\1\133\1\0\3\133\1\u0129\57\133\3\0" +
    "\17\133\1\0\1\133\1\0\13\133\1\u0103\47\133\3\0" +
    "\17\133\1\0\1\133\1\0\12\133\1\357\50\133\3\0" +
    "\17\133\1\0\1\133\1\0\25\133\1\u012a\35\133\3\0" +
    "\17\133\1\0\1\133\1\0\21\133\1\u012b\41\133\3\0" +
    "\17\133\1\0\1\133\1\0\22\133\1\u012c\40\133\3\0" +
    "\17\133\1\0\1\133\1\0\23\133\1\255\3\133\1\u012d" +
    "\33\133\3\0\17\133\1\0\1\133\1\0\11\133\1\u012e" +
    "\51\133\3\0\17\133\1\0\1\133\1\0\22\133\1\u012f" +
    "\40\133\3\0\17\133\1\0\1\133\1\0\3\133\1\u0130" +
    "\1\133\1\u0131\15\133\1\255\37\133\3\0\17\133\1\0" +
    "\1\133\1\0\14\133\1\u012e\46\133\3\0\17\133\1\0" +
    "\1\133\1\0\20\133\1\255\42\133\3\0\17\133\1\0" +
    "\1\133\1\0\12\133\1\u0132\50\133\3\0\17\133\1\0" +
    "\1\133\1\0\21\133\1\255\41\133\1\0\1\u0123\1\0" +
    "\17\133\1\0\1\133\1\0\17\133\1\u0133\43\133\3\0" +
    "\17\133\1\0\1\133\1\0\15\133\1\u0134\45\133\3\0" +
    "\17\133\1\0\1\133\1\0\15\133\1\u0135\45\133\3\0" +
    "\17\133\1\0\1\133\1\0\6\133\1\u0136\5\133\1\u0137" +
    "\46\133\3\0\17\133\1\0\1\133\1\0\17\133\1\u0138" +
    "\43\133\3\0\17\133\1\0\1\133\1\0\13\133\1\255" +
    "\10\133\1\307\36\133\3\0\17\133\1\0\1\133\1\0" +
    "\6\133\1\366\54\133\3\0\17\133\1\0\1\133\1\0" +
    "\10\133\1\u0139\52\133\3\0\17\133\1\0\1\133\1\0" +
    "\6\133\1\325\54\133\3\0\17\133\1\0\1\133\1\0" +
    "\23\133\1\357\37\133\3\0\17\133\1\0\1\133\1\0" +
    "\11\133\1\u013a\51\133\3\0\17\133\1\0\1\133\1\0" +
    "\22\133\1\u013b\40\133\3\0\17\133\1\0\1\133\1\0" +
    "\15\133\1\u013c\45\133\3\0\17\133\1\0\1\133\1\0" +
    "\17\133\1\u013d\43\133\3\0\17\133\1\0\1\133\1\0" +
    "\4\133\1\u013e\56\133\3\0\17\133\1\0\1\133\1\0" +
    "\6\133\1\u013f\54\133\3\0\17\133\1\0\1\133\1\0" +
    "\22\133\1\255\3\133\1\255\34\133\3\0\17\133\1\0" +
    "\1\133\1\0\17\133\1\365\3\133\1\357\37\133\3\0" +
    "\17\133\1\0\1\133\1\0\4\133\1\334\1\u0140\55\133" +
    "\3\0\17\133\1\0\1\133\1\0\15\133\1\u0141\45\133" +
    "\3\0\17\133\1\0\1\133\1\0\17\133\1\u0142\43\133" +
    "\3\0\17\133\1\0\1\133\1\0\2\133\1\u012e\13\133" +
    "\1\u0143\44\133\3\0\17\133\1\0\1\133\1\0\7\133" +
    "\1\u0144\53\133\3\0\17\133\1\0\1\133\1\0\15\133" +
    "\1\u0145\45\133\3\0\17\133\1\0\1\133\1\0\2\133" +
    "\1\u0146\2\133\1\276\55\133\3\0\17\133\1\0\1\133" +
    "\1\0\5\133\1\255\11\133\1\u0147\43\133\3\0\17\133" +
    "\1\0\1\133\1\0\22\133\1\343\40\133\3\0\17\133" +
    "\1\0\1\133\1\0\5\133\1\255\55\133\3\0\17\133" +
    "\1\0\1\133\1\0\22\133\1\266\2\133\1\u012a\35\133" +
    "\3\0\17\133\1\0\1\133\1\0\7\133\1\u0143\53\133" +
    "\3\0\17\133\1\0\1\133\1\0\47\133\1\255\11\133" +
    "\1\u0148\1\133\3\0\17\133\1\0\1\133\1\0\23\133" +
    "\1\255\37\133\3\0\17\133\1\0\1\133\1\0\2\133" +
    "\1\u0146\14\133\1\u0149\3\133\1\u014a\1\133\1\u012a\35\133" +
    "\3\0\17\133\1\0\1\133\1\0\12\133\1\u014b\50\133" +
    "\3\0\17\133\1\0\1\133\1\0\17\133\1\u0149\43\133" +
    "\3\0\17\133\1\0\1\133\1\0\12\133\1\u014c\10\133" +
    "\1\u014d\37\133\3\0\17\133\1\0\1\133\1\0\22\133" +
    "\1\u014c\40\133\3\0\17\133\1\0\1\133\1\0\6\133" +
    "\1\u014e\1\u014f\4\133\1\u0150\46\133\3\0\17\133\1\0" +
    "\1\133\1\0\12\133\1\262\50\133\3\0\17\133\1\0" +
    "\1\133\1\0\12\133\1\u0151\50\133\3\0\17\133\1\0" +
    "\1\133\1\0\6\133\1\u0152\54\133\3\0\17\133\1\0" +
    "\1\133\1\0\6\133\1\344\54\133\3\0\17\133\1\0" +
    "\1\133\1\0\16\133\1\u0153\44\133\1\0\1\u0123\1\0" +
    "\17\133\1\0\1\133\1\0\6\133\1\u0154\1\u0155\53\133" +
    "\3\0\17\133\1\0\1\133\1\0\4\133\1\u0156\56\133" +
    "\3\0\17\133\1\0\1\133\1\0\11\133\1\u013a\5\133" +
    "\1\u0149\43\133\3\0\17\133\1\0\1\133\1\0\12\133" +
    "\1\255\50\133\3\0\17\133\1\0\1\133\1\0\21\133" +
    "\1\u0157\1\u0158\40\133\3\0\17\133\1\0\1\133\1\0" +
    "\12\133\1\264\14\133\1\255\33\133\3\0\17\133\1\0" +
    "\1\133\1\0\17\133\1\u0149\7\133\1\u0159\33\133\3\0" +
    "\17\133\1\0\1\133\1\0\22\133\1\357\4\133\1\255" +
    "\33\133\3\0\17\133\1\0\1\133\1\0\2\133\1\u0146" +
    "\13\133\1\u015a\1\u0149\5\133\1\u012a\35\133\3\0\17\133" +
    "\1\0\1\133\1\0\14\133\1\255\46\133\3\0\17\133" +
    "\1\0\1\133\1\0\2\133\1\255\60\133\3\0\17\133" +
    "\1\0\1\133\1\0\16\133\1\255\10\133\1\255\33\133" +
    "\3\0\17\133\1\0\1\133\1\0\20\133\1\u015b\42\133" +
    "\3\0\17\133\1\0\1\133\1\0\6\133\1\325\6\133" +
    "\1\u015c\45\133\3\0\17\133\1\0\1\133\1\0\5\133" +
    "\1\u015d\55\133\3\0\17\133\1\0\1\133\1\0\6\133" +
    "\1\u015e\54\133\3\0\17\133\1\0\1\133\1\0\2\133" +
    "\1\u0151\6\133\1\u015f\4\133\1\u0160\44\133\3\0\17\133" +
    "\1\0\1\133\1\0\11\133\1\u0149\51\133\3\0\17\133" +
    "\1\0\1\133\1\0\14\133\1\u0161\46\133\3\0\17\133" +
    "\1\0\1\133\1\0\17\133\1\u0162\43\133\3\0\17\133" +
    "\1\0\1\133\1\0\22\133\1\u0163\40\133\3\0\17\133" +
    "\1\0\1\133\1\0\12\133\1\u0164\7\133\1\u0165\40\133" +
    "\3\0\17\133\1\0\1\133\1\0\23\133\1\u0166\37\133" +
    "\3\0\17\133\1\0\1\133\1\0\22\133\1\255\40\133" +
    "\3\0\17\133\1\0\1\133\1\0\41\133\1\255\21\133" +
    "\3\0\17\133\1\0\1\133\1\0\43\133\1\u0167\17\133" +
    "\3\0\17\133\1\0\1\133\1\0\2\133\1\u0168\57\133" +
    "\1\255\3\0\17\133\1\0\1\133\1\0\12\133\1\264" +
    "\50\133\3\0\17\133\1\0\1\133\1\0\27\133\1\u0159" +
    "\33\133\3\0\17\133\1\0\1\133\1\0\5\133\1\u0169" +
    "\55\133\3\0\17\133\1\0\1\133\1\0\23\133\1\u014a" +
    "\37\133\3\0\17\133\1\0\1\133\1\0\6\133\1\u0136" +
    "\54\133\3\0\17\133\1\0\1\133\1\0\27\133\1\u0166" +
    "\33\133\3\0\17\133\1\0\1\133\1\0\6\133\1\u016a" +
    "\54\133\3\0\13\133\103\210\1\u016b\1\u010e\3\210\103\211" +
    "\1\u016b\1\211\1\u010f\2\211\1\0\3\35\4\0\5\35" +
    "\1\u016c\30\35\1\u016c\23\35\6\0\1\35\5\0\1\35" +
    "\2\0\3\35\4\0\12\35\1\u016d\47\35\6\0\1\35" +
    "\5\0\1\35\1\0\20\34\1\u016e\24\34\1\u016e\35\34" +
    "\1\0\4\34\20\0\1\u016e\24\0\1\u016e\42\0\22\34" +
    "\1\u016f\24\34\1\u016f\33\34\1\0\4\34\106\223\1\u0170" +
    "\1\223\1\0\3\51\4\0\62\51\5\0\1\u0171\1\51" +
    "\5\0\1\51\2\0\3\61\4\0\62\61\5\0\1\u0172" +
    "\1\61\5\0\1\61\1\0\13\71\1\u0173\53\71\1\u0173" +
    "\4\71\1\233\33\71\1\u0174\24\71\1\u0174\26\71\1\233" +
    "\107\71\1\233\11\71\1\u0175\1\71\1\0\3\74\4\0" +
    "\62\74\5\0\1\u0176\1\74\5\0\1\74\1\0\14\103" +
    "\1\u0177\51\103\1\u0177\5\103\1\241\41\103\1\u0178\26\103" +
    "\1\u0178\16\103\1\241\13\103\1\0\3\106\4\0\62\106" +
    "\5\0\1\u0179\1\106\5\0\1\106\1\0\22\116\1\u017a" +
    "\24\116\1\u017b\24\116\1\247\31\116\1\u017c\25\116\1\u017d" +
    "\27\116\1\247\31\116\1\u017d\25\116\1\u017d\27\116\1\0" +
    "\13\116\1\133\1\u0124\1\133\1\u0124\1\0\1\133\1\0" +
    "\3\133\1\u0124\3\133\1\u0124\1\133\1\u0124\4\133\1\u0124" +
    "\3\133\1\u0124\1\133\1\u0124\3\133\7\u0124\11\133\1\u0124" +
    "\1\133\1\u0124\10\133\1\0\1\u0123\1\0\17\133\1\0" +
    "\1\133\1\0\3\133\1\255\57\133\3\0\17\133\1\0" +
    "\1\133\1\0\12\133\1\u014c\50\133\3\0\17\133\1\0" +
    "\1\133\1\0\6\133\1\366\54\133\1\0\1\u0123\1\0" +
    "\17\133\1\0\1\133\1\0\4\133\1\u017e\56\133\3\0" +
    "\17\133\1\0\1\133\1\0\12\133\1\u0103\50\133\3\0" +
    "\17\133\1\0\1\133\1\0\15\133\1\365\45\133\3\0" +
    "\17\133\1\0\1\133\1\0\3\133\1\u017f\57\133\3\0" +
    "\17\133\1\0\1\133\1\0\16\133\1\u014d\44\133\3\0" +
    "\17\133\1\0\1\133\1\0\23\133\1\u0180\37\133\3\0" +
    "\17\133\1\0\1\133\1\0\13\133\1\255\47\133\3\0" +
    "\17\133\1\0\1\133\1\0\17\133\1\u0181\43\133\3\0" +
    "\17\133\1\0\1\133\1\0\7\133\1\255\53\133\1\0" +
    "\1\u0123\1\0\17\133\1\0\1\133\1\0\7\133\1\255" +
    "\20\133\3\255\30\133\1\0\1\u0123\1\0\17\133\1\0" +
    "\1\133\1\0\6\133\1\u0146\54\133\3\0\17\133\1\0" +
    "\1\133\1\0\5\133\1\255\15\133\1\u0143\37\133\3\0" +
    "\17\133\1\0\1\133\1\0\4\133\1\u0182\56\133\3\0" +
    "\17\133\1\0\1\133\1\0\2\133\1\u0183\60\133\3\0" +
    "\17\133\1\0\1\133\1\0\23\133\1\u0184\37\133\3\0" +
    "\17\133\1\0\1\133\1\0\5\133\1\255\10\133\1\255" +
    "\44\133\3\0\17\133\1\0\1\133\1\0\13\133\1\255" +
    "\6\133\1\255\40\133\3\0\17\133\1\0\1\133\1\0" +
    "\11\133\1\357\51\133\3\0\17\133\1\0\1\133\1\0" +
    "\15\133\1\u015c\45\133\3\0\17\133\1\0\1\133\1\0" +
    "\27\133\1\u0184\33\133\3\0\17\133\1\0\1\133\1\0" +
    "\7\133\1\u013f\53\133\3\0\17\133\1\0\1\133\1\0" +
    "\22\133\1\u0185\40\133\3\0\17\133\1\0\1\133\1\0" +
    "\6\133\1\u0186\54\133\3\0\17\133\1\0\1\133\1\0" +
    "\4\133\1\u012e\56\133\3\0\17\133\1\0\1\133\1\0" +
    "\13\133\1\276\47\133\3\0\17\133\1\0\1\133\1\0" +
    "\6\133\1\u0187\54\133\3\0\17\133\1\0\1\133\1\0" +
    "\11\133\1\255\51\133\3\0\17\133\1\0\1\133\1\0" +
    "\6\133\1\357\54\133\3\0\17\133\1\0\1\133\1\0" +
    "\16\133\1\u0143\44\133\3\0\17\133\1\0\1\133\1\0" +
    "\3\133\1\u0188\57\133\3\0\17\133\1\0\1\133\1\0" +
    "\27\133\1\255\33\133\3\0\17\133\1\0\1\133\1\0" +
    "\17\133\1\u0189\43\133\3\0\17\133\1\0\1\133\1\0" +
    "\22\133\1\u013f\40\133\3\0\17\133\1\0\1\133\1\0" +
    "\17\133\1\255\43\133\3\0\17\133\1\0\1\133\1\0" +
    "\3\133\1\u018a\57\133\3\0\17\133\1\0\1\133\1\0" +
    "\14\133\1\u018b\46\133\3\0\17\133\1\0\1\133\1\0" +
    "\16\133\1\u0184\44\133\3\0\17\133\1\0\1\133\1\0" +
    "\7\133\1\u0188\53\133\3\0\17\133\1\0\1\133\1\0" +
    "\2\133\1\256\60\133\3\0\17\133\1\0\1\133\1\0" +
    "\13\133\1\u018c\3\133\1\u018d\43\133\3\0\17\133\1\0" +
    "\1\133\1\0\17\133\1\366\43\133\3\0\17\133\1\0" +
    "\1\133\1\0\15\133\1\u0188\45\133\3\0\17\133\1\0" +
    "\1\133\1\0\2\133\1\u0184\60\133\3\0\17\133\1\0" +
    "\1\133\1\0\23\133\2\255\36\133\3\0\17\133\1\0" +
    "\1\133\1\0\11\133\1\u012f\51\133\3\0\17\133\1\0" +
    "\1\133\1\0\27\133\1\u0103\33\133\3\0\17\133\1\0" +
    "\1\133\1\0\6\133\1\u018e\54\133\3\0\17\133\1\0" +
    "\1\133\1\0\6\133\1\u014c\54\133\3\0\17\133\1\0" +
    "\1\133\1\0\23\133\1\u0188\37\133\3\0\17\133\1\0" +
    "\1\133\1\0\27\133\1\u018f\33\133\3\0\17\133\1\0" +
    "\1\133\1\0\6\133\1\u0142\54\133\3\0\17\133\1\0" +
    "\1\133\1\0\23\133\1\334\37\133\3\0\17\133\1\0" +
    "\1\133\1\0\13\133\1\u0184\47\133\3\0\17\133\1\0" +
    "\1\133\1\0\26\133\1\u0103\34\133\3\0\17\133\1\0" +
    "\1\133\1\0\2\133\1\u0146\60\133\3\0\17\133\1\0" +
    "\1\133\1\0\17\133\1\365\43\133\3\0\17\133\1\0" +
    "\1\133\1\0\16\133\1\275\44\133\3\0\17\133\1\0" +
    "\1\133\1\0\24\133\1\255\36\133\3\0\17\133\1\0" +
    "\1\133\1\0\22\133\1\265\40\133\3\0\17\133\1\0" +
    "\1\133\1\0\4\133\1\357\4\133\1\u0190\51\133\3\0" +
    "\17\133\1\0\1\133\1\0\12\133\1\u0191\50\133\3\0" +
    "\17\133\1\0\1\133\1\0\17\133\1\u0192\43\133\3\0" +
    "\17\133\1\0\1\133\1\0\23\133\1\u0103\37\133\3\0" +
    "\17\133\1\0\1\133\1\0\46\133\1\u0193\14\133\3\0" +
    "\17\133\1\0\1\133\1\0\62\133\1\255\3\0\17\133" +
    "\1\0\1\133\1\0\5\133\1\u0103\55\133\3\0\17\133" +
    "\1\0\1\133\1\0\7\133\1\u0194\53\133\3\0\13\133" +
    "\1\0\3\35\4\0\4\35\1\u0195\51\35\1\u0195\3\35" +
    "\6\0\1\35\5\0\1\35\2\0\3\35\4\0\21\35" +
    "\1\u0196\40\35\6\0\1\35\5\0\1\35\1\0\22\34" +
    "\1\u0197\24\34\1\u0197\33\34\1\0\33\34\1\u0198\24\34" +
    "\1\u0198\26\34\1\0\4\34\20\71\1\u0199\24\71\1\u0199" +
    "\26\71\1\233\41\71\1\u019a\26\71\1\u019a\16\71\1\233" +
    "\13\71\74\u0175\1\u019b\11\u0175\1\u019c\1\u0175\26\103\1\u019d" +
    "\26\103\1\u019d\16\103\1\241\31\103\1\u019e\25\103\1\u019e" +
    "\27\103\1\241\13\103\16\116\1\u019f\25\116\1\u01a0\27\116" +
    "\1\247\31\116\1\u01a0\25\116\1\u01a0\27\116\1\0\23\116" +
    "\1\u01a1\6\116\1\u01a2\54\116\1\247\23\116\1\u01a1\6\116" +
    "\1\u01a1\54\116\1\0\13\116\4\133\1\0\1\133\1\0" +
    "\26\133\1\255\34\133\3\0\17\133\1\0\1\133\1\0" +
    "\22\133\1\u0149\40\133\3\0\17\133\1\0\1\133\1\0" +
    "\22\133\1\u01a3\40\133\3\0\17\133\1\0\1\133\1\0" +
    "\14\133\1\366\46\133\3\0\17\133\1\0\1\133\1\0" +
    "\23\133\1\366\37\133\3\0\17\133\1\0\1\133\1\0" +
    "\16\133\1\255\44\133\3\0\17\133\1\0\1\133\1\0" +
    "\7\133\1\255\53\133\3\0\17\133\1\0\1\133\1\0" +
    "\21\133\1\u0184\41\133\3\0\17\133\1\0\1\133\1\0" +
    "\12\133\1\u0181\50\133\3\0\17\133\1\0\1\133\1\0" +
    "\21\133\1\255\41\133\3\0\17\133\1\0\1\133\1\0" +
    "\4\133\1\255\56\133\3\0\17\133\1\0\1\133\1\0" +
    "\7\133\1\366\53\133\3\0\17\133\1\0\1\133\1\0" +
    "\16\133\1\u0103\44\133\3\0\17\133\1\0\1\133\1\0" +
    "\14\133\1\u0149\46\133\3\0\17\133\1\0\1\133\1\0" +
    "\22\133\1\u01a4\40\133\3\0\17\133\1\0\1\133\1\0" +
    "\7\133\1\u01a5\53\133\3\0\17\133\1\0\1\133\1\0" +
    "\12\133\1\u0181\13\133\1\255\34\133\3\0\17\133\1\0" +
    "\1\133\1\0\7\133\1\u0149\53\133\3\0\17\133\1\0" +
    "\1\133\1\0\31\133\1\u01a5\1\u01a6\30\133\3\0\17\133" +
    "\1\0\1\133\1\0\6\133\1\334\54\133\3\0\17\133" +
    "\1\0\1\133\1\0\13\133\1\u0188\47\133\3\0\17\133" +
    "\1\0\1\133\1\0\42\133\1\255\20\133\3\0\17\133" +
    "\1\0\1\133\1\0\17\133\1\334\43\133\3\0\13\133" +
    "\1\0\3\35\4\0\12\35\1\u01a7\24\35\1\u01a7\22\35" +
    "\6\0\1\35\5\0\1\35\2\0\3\35\4\0\16\35" +
    "\1\u01a8\43\35\6\0\1\35\5\0\1\35\1\0\27\34" +
    "\1\u01a9\24\34\1\u01a9\26\34\1\0\20\34\1\u01aa\51\34" +
    "\1\u01aa\14\34\1\0\4\34\26\71\1\u01ab\26\71\1\u01ab" +
    "\16\71\1\233\30\71\1\u01ac\30\71\1\u01ac\25\71\1\233" +
    "\13\71\74\u0175\1\u019b\4\u0175\1\u01ad\4\u0175\1\u019c\75\u0175" +
    "\1\u019b\11\u0175\1\235\1\u0175\16\103\1\u01ae\25\103\1\u01ae" +
    "\27\103\1\241\107\103\1\241\6\103\1\u01af\4\103\10\116" +
    "\1\u01b0\6\116\1\u01b1\54\116\1\247\23\116\1\u01b0\6\116" +
    "\1\u01b0\54\116\1\0\35\116\1\u01b2\24\116\1\u01b2\24\116" +
    "\1\0\35\116\1\u01b3\24\116\1\u01b2\24\116\1\247\13\116" +
    "\4\133\1\0\1\133\1\0\24\133\1\255\36\133\1\0" +
    "\1\u0123\1\0\17\133\1\0\1\133\1\0\4\133\1\u01b4" +
    "\56\133\1\0\1\u0123\1\0\17\133\1\0\1\133\1\0" +
    "\33\133\1\255\27\133\3\0\17\133\1\0\1\133\1\0" +
    "\30\133\1\255\2\133\1\255\27\133\3\0\13\133\1\0" +
    "\3\35\4\0\6\35\1\u01b5\53\35\6\0\1\35\5\0" +
    "\1\35\1\0\14\34\1\u01b6\51\34\1\u01b6\14\34\1\0" +
    "\22\34\1\u01b7\25\34\1\u01b7\36\34\1\0\4\34\15\71" +
    "\1\u01b8\30\71\1\u01b8\25\71\1\233\27\71\1\u01b9\51\71" +
    "\1\u01b9\5\71\1\233\13\71\13\u0175\1\u01ba\53\u0175\1\u01ba" +
    "\4\u0175\1\u019b\11\u0175\1\u019c\1\u0175\74\103\1\241\6\103" +
    "\1\0\4\103\22\116\1\u01bb\24\116\1\u01bb\24\116\1\0" +
    "\35\116\1\u01bc\24\116\1\u01bb\24\116\1\247\44\116\1\u01bd" +
    "\11\116\1\u01bd\30\116\1\0\44\116\1\u01be\11\116\1\u01bd" +
    "\30\116\1\247\13\116\4\133\1\0\1\133\1\0\20\133" +
    "\1\340\42\133\3\0\13\133\1\0\3\35\4\0\21\35" +
    "\1\u01bf\40\35\6\0\1\35\5\0\1\35\1\0\16\34" +
    "\1\0\25\34\1\0\36\34\1\0\4\34\14\71\1\u01c0" +
    "\51\71\1\u01c0\5\71\1\233\35\71\1\u01c1\24\71\1\u01c1" +
    "\24\71\1\233\13\71\20\u0175\1\u01c2\24\u0175\1\u01c2\26\u0175" +
    "\1\u019b\11\u0175\1\u019c\1\u0175\31\116\1\u01c3\11\116\1\u01c3" +
    "\30\116\1\0\44\116\1\u01c4\11\116\1\u01c3\30\116\1\247" +
    "\41\116\1\u01c5\26\116\1\u01c5\16\116\1\0\41\116\1\u01c6" +
    "\26\116\1\u01c5\16\116\1\247\13\116\22\71\1\u01c7\24\71" +
    "\1\u01c7\24\71\1\233\107\71\1\233\6\71\1\u01af\4\71" +
    "\26\u0175\1\u01c8\26\u0175\1\u01c8\16\u0175\1\u019b\11\u0175\1\u019c" +
    "\1\u0175\26\116\1\u01c9\26\116\1\u01c9\16\116\1\0\41\116" +
    "\1\u01ca\26\116\1\u01c9\16\116\1\247\31\116\1\u01cb\25\116" +
    "\1\u01cb\27\116\1\0\31\116\1\u01cc\25\116\1\u01cb\27\116" +
    "\1\247\13\116\74\71\1\233\6\71\1\0\4\71\15\u0175" +
    "\1\u01cd\30\u0175\1\u01cd\25\u0175\1\u019b\11\u0175\1\u019c\1\u0175" +
    "\16\116\1\u01ce\25\116\1\u01ce\27\116\1\0\31\116\1\u01cf" +
    "\25\116\1\u01ce\27\116\1\247\44\116\1\u01d0\11\116\1\u01d0" +
    "\30\116\1\0\44\116\1\u01d1\11\116\1\u01d0\30\116\1\247" +
    "\13\116\14\u0175\1\u01d2\51\u0175\1\u01d2\5\u0175\1\u019b\11\u0175" +
    "\1\u019c\1\u0175\31\116\1\u01d3\11\116\1\u01d3\30\116\1\0" +
    "\44\116\1\u01d4\11\116\1\u01d3\30\116\1\247\107\116\1\0" +
    "\6\116\1\u01af\100\116\1\247\6\116\1\u01af\4\116\22\u0175" +
    "\1\u01d5\24\u0175\1\u01d5\24\u0175\1\u019b\11\u0175\1\u019c\1\u0175" +
    "\74\116\1\0\6\116\1\0\100\116\1\247\6\116\1\0" +
    "\4\116\74\u0175\1\u019b\6\u0175\1\u01d6\2\u0175\1\u019c\1\u0175" +
    "\106\u01d6\1\u01d7\107\u01d6\1\u01d8\1\u01d6\4\0\3\u01d8\74\0" +
    "\1\u01d9\2\0\1\u01da\107\0\1\u01d6\1\0";

  /**
   * The transition table of the DFA
   */
  final private static int[] yytrans = yy_unpack();

  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String[] YY_ERROR_MSG = {
    "Unkown internal scanner error", "Internal error: unknown state",
    "Error: could not match input", "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte[] YY_ATTRIBUTE = {
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 9, 9, 1, 1, 1, 1, 1, 9, 1,
    9, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 9, 9, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 1, 9, 9, 0, 1,
    1, 9, 1, 9, 0, 1, 9, 1, 9, 9, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1,
    1, 0, 1, 0, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 1,
    1, 0, 0, 9, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 9, 0, 0, 0, 1, 1, 1, 0, 9, 0, 1, 0,
    0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 9, 0
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] yy_buffer = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
  private int lastToken;
  private int nextState = YYINITIAL;

  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public HTMLLexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public HTMLLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * next Token method that allows you to control if whitespace and comments are
   * returned as tokens.
   */
  public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)
    throws IOException {
    Token t = getNextToken();

    while ((t != null) &&
          ((!returnWhiteSpace && t.isWhiteSpace()) ||
          (!returnComments && t.isComment()))) {
      t = getNextToken();
    }

    return (t);
  }

  /**
   * Prints out tokens from a file or System.in.
   * If no arguments are given, System.in will be used for input.
   * If more arguments are given, the first argument will be used as
   * the name of the file to use as input
   *
   * @param args program arguments, of which the first is a filename
   */
  public static void main(String[] args) {
    InputStream in;

    try {
      if (args.length > 0) {
        File f = new File(args[0]);

        if (f.exists()) {
          if (f.canRead()) {
            in = new FileInputStream(f);
          } else {
            throw new IOException("Could not open " + args[0]);
          }
        } else {
          throw new IOException("Could not find " + args[0]);
        }
      } else {
        in = System.in;
      }

      HTMLLexer shredder = new HTMLLexer(in);
      Token t;

      while ((t = shredder.getNextToken()) != null) {
        if (t.getID() != CToken.WHITE_SPACE) {
          System.out.println(t);
        }
      }
    } catch (IOException e) {
      System.out.println(e.getMessage());
    }
  }

  /**
   * Closes the current input stream, and resets the scanner to read from a new input stream.
  * All internal variables are reset, the old input stream  cannot be reused
  * (content of the internal buffer is discarded and lost).
  * The lexical state is set to the initial state.
   * Subsequent tokens read from the lexer will start with the line, char, and column
   * values given here.
   *
   * @param reader The new input.
   * @param yyline The line number of the first token.
   * @param yychar The position (relative to the start of the stream) of the first token.
   * @param yycolumn The position (relative to the line) of the first token.
   * @throws IOException if an IOExecption occurs while switching readers.
   */
  public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn)
    throws IOException {
    yyreset(reader);
    this.yyline = yyline;
    this.yychar = yychar;
    this.yycolumn = yycolumn;
  }

  /**
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int[] yy_unpack() {
    int[] trans = new int[30960];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);

    return trans;
  }

  /**
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int[] trans) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length();

    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;

      do
        trans[j++] = value;
      while (--count > 0);
    }

    return j;
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {
    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, yy_buffer, 0,
        yy_endRead - yy_startRead);

      /* translate stored positions */
      yy_endRead -= yy_startRead;
      yy_currentPos -= yy_startRead;
      yy_markedPos -= yy_startRead;
      yy_pushbackPos -= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char[] newBuffer = new char[yy_currentPos * 2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead,
        yy_buffer.length - yy_endRead);

    if (numRead < 0) {
      return true;
    } else {
      yy_endRead += numRead;

      return false;
    }
  }

  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true; /* indicate end of file */
    yy_endRead = yy_startRead; /* invalidate buffer    */

    if (yy_reader != null) {
      yy_reader.close();
    }
  }
  
  final public int getPos(){
  	return yy_currentPos;
  }

  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL = true;
    yy_atEOF = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }

  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }

  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String(yy_buffer, yy_startRead, yy_markedPos - yy_startRead);
  }

  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead + pos];
  }

  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos - yy_startRead;
  }

  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;

    try {
      message = YY_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number) {
    if (number > yylength()) {
      yy_ScanError(YY_PUSHBACK_2BIG);
    }

    yy_markedPos -= number;
  }

  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Token getNextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char[] yy_buffer_l = yy_buffer;
    char[] yycmap_l = yycmap;

    int[] yytrans_l = yytrans;
    int[] yy_rowMap_l = yy_rowMap;
    byte[] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar += (yy_markedPos_l - yy_startRead);

      boolean yy_r = false;

      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
            yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;

          break;

        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;

          break;

        case '\n':

          if (yy_r) {
            yy_r = false;
          } else {
            yyline++;
            yycolumn = 0;
          }

          break;

        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;

        if (yy_markedPos_l < yy_endRead_l) {
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        } else if (yy_atEOF) {
          yy_peek = false;
        } else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;

          if (eof) {
            yy_peek = false;
          } else {
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
          }
        }

        if (yy_peek) {
          yyline--;
        }
      }

      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;

yy_forAction:  {
        while (true) {
          if (yy_currentPos_l < yy_endRead_l) {
            yy_input = yy_buffer_l[yy_currentPos_l++];
          } else if (yy_atEOF) {
            yy_input = YYEOF;

            break yy_forAction;
          } else {
            // store back cached positions
            yy_currentPos = yy_currentPos_l;
            yy_markedPos = yy_markedPos_l;

            boolean eof = yy_refill();

            // get translated positions and possibly new buffer
            yy_currentPos_l = yy_currentPos;
            yy_markedPos_l = yy_markedPos;
            yy_buffer_l = yy_buffer;
            yy_endRead_l = yy_endRead;

            if (eof) {
              yy_input = YYEOF;

              break yy_forAction;
            } else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }

          int yy_next = yytrans_l[yy_rowMap_l[yy_state] + yycmap_l[yy_input]];

          if (yy_next == -1) {
            break yy_forAction;
          }

          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];

          if ((yy_attributes & 1) == 1) {
            yy_action = yy_state;
            yy_markedPos_l = yy_currentPos_l;

            if ((yy_attributes & 8) == 8) {
              break yy_forAction;
            }
          }
        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {
      case 159: {
        nextState = PRE_TAG;
        lastToken = HTMLToken.VALUE;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 475:
        break;

      case 25:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 171:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 192:
      case 193:
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
      case 224:
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 235:
      case 236:
      case 237:
      case 238:
      case 239:
      case 240:
      case 241:
      case 242:
      case 243:
      case 244:
      case 245:
      case 246:
      case 247:
      case 248:
      case 249:
      case 250:
      case 251:
      case 252:
      case 253:
      case 254:
      case 255:
      case 256:
      case 257:
      case 258:
      case 259:
      case 260:
      case 261:
      case 262:
      case 263:
      case 264:
      case 265:
      case 266:
      case 267:
      case 268:
      case 292:
      case 293:
      case 295:
      case 296:
      case 297:
      case 298:
      case 299:
      case 300:
      case 301:
      case 302:
      case 305:
      case 306:
      case 307:
      case 308:
      case 309:
      case 310:
      case 311:
      case 312:
      case 313:
      case 314:
      case 315:
      case 316:
      case 317:
      case 318:
      case 319:
      case 320:
      case 321:
      case 322:
      case 323:
      case 324:
      case 325:
      case 326:
      case 327:
      case 328:
      case 329:
      case 330:
      case 331:
      case 332:
      case 333:
      case 334:
      case 335:
      case 336:
      case 337:
      case 338:
      case 339:
      case 340:
      case 341:
      case 342:
      case 343:
      case 344:
      case 345:
      case 346:
      case 347:
      case 348:
      case 349:
      case 350:
      case 351:
      case 352:
      case 353:
      case 354:
      case 355:
      case 356:
      case 357:
      case 358:
      case 359:
      case 360:
      case 361:
      case 381:
      case 382:
      case 383:
      case 384:
      case 385:
      case 386:
      case 387:
      case 388:
      case 389:
      case 390:
      case 391:
      case 392:
      case 393:
      case 394:
      case 395:
      case 396:
      case 397:
      case 398:
      case 399:
      case 400:
      case 401:
      case 402:
      case 403:
      case 420:
      case 421:
      case 435: {
        nextState = YYINITIAL;
        lastToken = HTMLToken.ERROR_MALFORMED_TAG;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));

        return (t);
      }

      case 476:
        break;

      case 10:
      case 56:
      case 156:
      case 282:
      case 372:
      case 411:
      case 472: {
        lastToken = HTMLToken.SCRIPT;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));

        return (t);
      }

      case 477:
        break;

      case 57:
      case 155:
      case 281:
      case 371:
      case 409:
      case 427:
      case 440:
      case 448: {
        lastToken = HTMLToken.SCRIPT;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));

        return (t);
      }

      case 478:
        break;

      case 61: {
        nextState = PRE;
        lastToken = HTMLToken.TAG_END;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 479:
        break;

      case 438: {
        nextState = DOCTYPE;
        lastToken = HTMLToken.TAG_NAME;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 480:
        break;

      case 153: {
        nextState = SCRIPT_TAG;
        lastToken = HTMLToken.VALUE;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 481:
        break;

      case 44: {
        nextState = START_VALUE;
        lastToken = HTMLToken.EQUAL;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 482:
        break;

      case 43: {
        nextState = YYINITIAL;
        lastToken = HTMLToken.TAG_END;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 483:
        break;

      case 40:
      case 42:
      case 148:
      case 278: {
        nextState = START_EQUAL;
        lastToken = HTMLToken.NAME;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 484:
        break;

      case 71: {
        nextState = TEXTAREA;
        lastToken = HTMLToken.TAG_END;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 485:
        break;

      case 34:
      case 35:
      case 36:
      case 37:
      case 39:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88: {
        nextState = COMMENT_DEF;
        lastToken = HTMLToken.ERROR_MALFORMED_TAG;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 486:
        break;

      case 72: {
        nextState = START_TEXTAREA_VALUE;
        lastToken = HTMLToken.EQUAL;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 487:
        break;

      case 33: {
        nextState = FINISH_END_TAG;
        lastToken = HTMLToken.END_TAG_NAME;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 488:
        break;

      case 51:
      case 152: {
        nextState = SCRIPT;
        lastToken = HTMLToken.ERROR_MALFORMED_TAG;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 489:
        break;

      case 55: {
        nextState = SCRIPT;
        lastToken = HTMLToken.ERROR_MALFORMED_TAG;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 490:
        break;

      case 367: {
        nextState = COMMENT_DEF;
        lastToken = HTMLToken.COMMENT;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 491:
        break;

      case 272: {
        nextState = PRE_TAG;
        lastToken = HTMLToken.TAG_NAME;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 492:
        break;

      case 165: {
        nextState = TEXTAREA_TAG;
        lastToken = HTMLToken.VALUE;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 493:
        break;

      case 89: {
        nextState = YYINITIAL;
        lastToken = HTMLToken.ERROR_MALFORMED_TAG;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 494:
        break;

      case 73:
      case 74:
      case 75:
      case 164: {
        nextState = TEXTAREA;
        lastToken = HTMLToken.ERROR_MALFORMED_TAG;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 495:
        break;

      case 32:
      case 65:
      case 76: {
        nextState = YYINITIAL;
        lastToken = HTMLToken.ERROR_MALFORMED_TAG;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 496:
        break;

      case 27: {
        nextState = YYINITIAL;
        lastToken = HTMLToken.ERROR_MALFORMED_TAG;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 497:
        break;

      case 0:
      case 23: {
        nextState = YYINITIAL;
        lastToken = HTMLToken.WORD;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));

        return (t);
      }

      case 498:
        break;

      case 45:
      case 46: {
        nextState = YYINITIAL;
        lastToken = HTMLToken.ERROR_MALFORMED_TAG;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 499:
        break;

      case 47:
      case 150: {
        nextState = SCRIPT;
        lastToken = HTMLToken.ERROR_MALFORMED_TAG;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 500:
        break;

      case 53:
      case 54: {
        nextState = SCRIPT;
        lastToken = HTMLToken.ERROR_MALFORMED_TAG;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 501:
        break;

      case 58:
      case 157: {
        nextState = PRE;
        lastToken = HTMLToken.ERROR_MALFORMED_TAG;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 502:
        break;

      case 63:
      case 64: {
        nextState = PRE;
        lastToken = HTMLToken.ERROR_MALFORMED_TAG;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 503:
        break;

      case 59:
      case 60:
      case 158:
      case 283: {
        nextState = START_PRE_EQUAL;
        lastToken = HTMLToken.NAME;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 504:
        break;

      case 62: {
        nextState = START_PRE_VALUE;
        lastToken = HTMLToken.EQUAL;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 505:
        break;

      case 68:
      case 162: {
        nextState = TEXTAREA;
        lastToken = HTMLToken.ERROR_MALFORMED_TAG;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 506:
        break;

      case 446: {
        nextState = TEXTAREA_TAG;
        lastToken = HTMLToken.TAG_NAME;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 507:
        break;

      case 52: {
        nextState = START_SCRIPT_VALUE;
        lastToken = HTMLToken.EQUAL;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 508:
        break;

      case 69:
      case 70:
      case 163:
      case 286: {
        nextState = START_TEXTAREA_EQUAL;
        lastToken = HTMLToken.NAME;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 509:
        break;

      case 38:
      case 81:
      case 82: {
        System.err.println("Unmatched input.");
        System.err.println("Last token: " + lastToken + ", text: " + yytext());

        String state = "";
        String text = yytext();

        switch (nextState) {
        case YYINITIAL:
          state = "YYINITIAL";

          break;

        case START_TAG:
          state = "START_TAG";

          break;

        case START_END_TAG:
          state = "START_END_TAG";

          break;

        case START_DOC_TAG:
          state = "START_DOC_TAG";

          break;

        case TAG:
          state = "TAG";

          break;

        case START_EQUAL:
          state = "START_EQUAL";

          break;

        case START_VALUE:
          state = "START_VALUE";

          break;

        case SCRIPT_TAG:
          state = "SCRIPT_TAG";

          break;

        case START_SCRIPT_EQUAL:
          state = "START_SCRIPT_EQUAL";

          break;

        case START_SCRIPT_VALUE:
          state = "START_SCRIPT_VALUE";

          break;

        case SCRIPT:
          state = "SCRIPT";

          break;

        case PRE_TAG:
          state = "PRE_TAG";

          break;

        case START_PRE_EQUAL:
          state = "START_PRE_EQUAL";

          break;

        case START_PRE_VALUE:
          state = "START_PRE_VALUE";

          break;

        case PRE:
          state = "PRE";

          break;

        case TEXTAREA_TAG:
          state = "TEXTAREA_TAG";

          break;

        case START_TEXTAREA_EQUAL:
          state = "START_TEXTAREA_EQUAL";

          break;

        case START_TEXTAREA_VALUE:
          state = "START_TEXTAREA_VALUE";

          break;

        case TEXTAREA:
          state = "TEXTAREA";

          break;

        case TAG_END:
          state = "TAG_END";

          break;

        case DOCTYPE:
          state = "DOCTYPE";

          break;

        case COMMENT_DEF:
          state = "COMMENT_DEF";

          break;

        case FINISH_END_TAG:
          state = "FINISH_END_TAG";

          break;
        }

        System.err.println("State: " + state);
        System.err.println("Text: " + text);
        System.err.println("Line: " + (yyline + 1));
        System.err.println("Column: " + (yycolumn + 1));
        yy_ScanError(YY_NO_MATCH);
      }

      case 510:
        break;

      case 430: {
        nextState = YYINITIAL;
        lastToken = HTMLToken.END_TAG_NAME;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 511:
        break;

      case 422: {
        nextState = SCRIPT_TAG;
        lastToken = HTMLToken.TAG_NAME;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 512:
        break;

      case 362: {
        nextState = YYINITIAL;
        lastToken = HTMLToken.SCRIPT;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));

        return (t);
      }

      case 513:
        break;

      case 170:
      case 172:
      case 191:
      case 234:
      case 290:
      case 291:
      case 294:
      case 303:
      case 304:
      case 418:
      case 419: {
        nextState = YYINITIAL;
        lastToken = HTMLToken.CHAR_REF;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));

        return (t);
      }

      case 514:
        break;

      case 134: {
        nextState = START_DOC_TAG;
        lastToken = HTMLToken.TAG_START;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 515:
        break;

      case 133: {
        nextState = START_END_TAG;
        lastToken = HTMLToken.TAG_START;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 516:
        break;

      case 26: {
        nextState = START_TAG;
        lastToken = HTMLToken.TAG_START;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 517:
        break;

      case 48:
      case 49:
      case 151:
      case 279: {
        nextState = START_SCRIPT_EQUAL;
        lastToken = HTMLToken.NAME;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 518:
        break;

      case 149: {
        nextState = TAG;
        lastToken = HTMLToken.VALUE;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 519:
        break;

      case 78:
      case 167:
      case 288:
      case 379:
      case 417:
      case 434:
      case 445:
      case 453:
      case 459:
      case 464: {
        lastToken = HTMLToken.WORD;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));

        return (t);
      }

      case 520:
        break;

      case 28:
      case 29:
      case 30:
      case 31:
      case 137:
      case 138:
      case 139:
      case 271:
      case 273:
      case 363:
      case 364:
      case 404:
      case 405:
      case 423:
      case 436: {
        nextState = TAG;
        lastToken = HTMLToken.TAG_NAME;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 521:
        break;

      case 14:
      case 66: {
        lastToken = HTMLToken.WORD;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));

        return (t);
      }

      case 522:
        break;

      case 18:
      case 77: {
        lastToken = HTMLToken.WORD;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));

        return (t);
      }

      case 523:
        break;

      case 20:
      case 79:
      case 80:
      case 83: {
        lastToken = HTMLToken.NAME;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));

        return (t);
      }

      case 524:
        break;

      case 24:
      case 41:
      case 140: {
        lastToken = HTMLToken.WHITE_SPACE;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));

        return (t);
      }

      case 525:
        break;

      case 50: {
        nextState = SCRIPT;
        lastToken = HTMLToken.TAG_END;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));
        yybegin(nextState);

        return (t);
      }

      case 526:
        break;

      case 67:
      case 161:
      case 285:
      case 375:
      case 413: {
        lastToken = HTMLToken.WORD;

        String text = yytext();
        HTMLToken t = (new HTMLToken(lastToken, text, yyline, yychar,
            yychar + text.length(), nextState));

        return (t);
      }

      case 527:
        break;

      default:

        if ((yy_input == YYEOF) && (yy_startRead == yy_currentPos)) {
          yy_atEOF = true;

          return null;
        } else {
          yy_ScanError(YY_NO_MATCH);
        }
      }
    }
  }
}
