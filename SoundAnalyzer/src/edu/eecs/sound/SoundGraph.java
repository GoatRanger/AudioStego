/*
 * SoundGraph.java
 *
 * Created on June 30, 2003, 3:46 PM
 */

package edu.eecs.sound;

import java.awt.*;

/**
 *
 * @author  DK8685
 */
public class SoundGraph extends javax.swing.JPanel {
    int[] buckets = new int[256];
    byte[] data = null;
    
    /** Creates new form SoundGraph */
    public SoundGraph() {
        this("Recording", 300, 300);
    }
    
    public SoundGraph(String title, int width, int height) {
        initComponents(width, height);
        if (getBorder() instanceof javax.swing.border.TitledBorder) {
            ((javax.swing.border.TitledBorder)getBorder()).setTitle(title);
        }
    }
    
    public void setData(byte[] data) {
        this.data = data;
        for (int i=0; i<data.length; i++) {
        	buckets[data[i]+128]++;
        }
        System.out.println("Buckets Filled");
        repaint();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents(int width, int height) {//GEN-BEGIN:initComponents

        setLayout(new java.awt.BorderLayout());

        setBorder(new javax.swing.border.TitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12)));
        setMinimumSize(new java.awt.Dimension(width, height));
        setPreferredSize(new java.awt.Dimension(width, height));
        setSize(new java.awt.Dimension(width, height));
    }//GEN-END:initComponents
    
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (data == null) return;
        Shape clipping = g.getClip();
        g.setClip(15,20, getWidth()-30, getHeight()-35);
        g.setColor(Color.white);
        g.fillRect(0,0, getWidth(), getHeight());
        double width = this.getWidth();
        double height = this.getHeight();
        int max = 0;
        int min = Integer.MAX_VALUE;
        for (int i=0; i<data.length; i++) {
            if (data[i] < min) {
                min = data[i];
            }
            if (data[i] > max) {
                max = data[i];
            }
        }
        double scaleY = height / (max-min);
        double scaleX = width / data.length;
        double mid = height/2.0;
        g.setColor(Color.black);
        int lastX = 0;
        double total = 0;
        int count = 0;
        int prevData = 0;
        for (int i=1; i<data.length; i++) {
            g.drawRect((int)(i*scaleX), (int)(data[i]+mid),1,1);
        }
        g.setClip(clipping);
    }    
}
